{"file_contents":{"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"twilio>=9.8.1\",\n]\n","size_bytes":165},"smartq/next-env.d.ts":{"content":"/// <reference types=\"next\" />\n/// <reference types=\"next/image-types/global\" />\n/// <reference path=\"./.next/types/routes.d.ts\" />\n\n// NOTE: This file should not be edited\n// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.\n","size_bytes":262},"smartq/next.config.js":{"content":"/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  images: {\n    domains: ['localhost'],\n    remotePatterns: [\n      {\n        protocol: 'https',\n        hostname: 'supabase.co',\n      },\n      {\n        protocol: 'https',\n        hostname: '*.supabase.co',\n      },\n      {\n        protocol: 'https',\n        hostname: 'maps.googleapis.com',\n      },\n      // Allow all HTTPS domains only in development\n      ...(process.env.NODE_ENV === 'development' ? [{\n        protocol: 'https',\n        hostname: '**',\n      }] : []),\n    ],\n  },\n  experimental: {\n    serverActions: {\n      allowedOrigins: process.env.NODE_ENV === 'development' ? ['*'] : [process.env.NEXTAUTH_URL || 'http://localhost:3000'],\n    },\n  },\n}\n\nmodule.exports = nextConfig","size_bytes":758},"smartq/postcss.config.js":{"content":"module.exports = {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}","size_bytes":81},"smartq/tailwind.config.js":{"content":"/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',\n    './src/components/**/*.{js,ts,jsx,tsx,mdx}',\n    './src/app/**/*.{js,ts,jsx,tsx,mdx}',\n  ],\n  theme: {\n    extend: {\n      colors: {\n        // Theme colors for different salon types\n        'men': {\n          50: '#f0f9ff',\n          100: '#e0f2fe',\n          500: '#0ea5e9',\n          600: '#0284c7',\n          700: '#0369a1',\n          900: '#0c4a6e',\n        },\n        'women': {\n          50: '#fdf2f8',\n          100: '#fce7f3',\n          500: '#ec4899',\n          600: '#db2777',\n          700: '#be185d',\n          900: '#831843',\n        },\n        'unisex': {\n          50: '#f7fee7',\n          100: '#ecfccb',\n          500: '#84cc16',\n          600: '#65a30d',\n          700: '#4d7c0f',\n          900: '#365314',\n        },\n      },\n      fontFamily: {\n        sans: ['Inter', 'ui-sans-serif', 'system-ui', 'sans-serif'],\n      },\n    },\n  },\n  plugins: [],\n}","size_bytes":996},"smartq/database/README.md":{"content":"# SmartQ Database Setup\n\nThis directory contains the database schema and utilities for the SmartQ salon queue management system.\n\n## Files Overview\n\n- `schema.sql` - Complete database schema with tables, indexes, triggers, and RLS policies\n- `functions/distance_helpers.sql` - Geographic distance calculations for salon discovery  \n- `functions/queue_helpers.sql` - Queue management and status update functions\n- `sample_data.sql` - Sample data for development and testing\n\n## Supabase Setup Instructions\n\n### 1. Create Supabase Project\n1. Go to [supabase.com](https://supabase.com)\n2. Create a new project\n3. Wait for the project to be ready\n\n### 2. Run Database Schema\n1. Go to your Supabase project dashboard\n2. Navigate to SQL Editor\n3. Run the contents of `schema.sql`\n4. Run the contents of `functions/distance_helpers.sql`\n5. Run the contents of `functions/queue_helpers.sql`\n6. Optionally run `sample_data.sql` for development data\n\n### 3. Configure Environment Variables\nCopy the values from your Supabase project settings:\n\n```bash\n# From Project Settings > API\nNEXT_PUBLIC_SUPABASE_URL=your_project_url\nNEXT_PUBLIC_SUPABASE_ANON_KEY=your_anon_key\n\n# From Project Settings > API (Service Role - keep secret!)\nSUPABASE_SERVICE_ROLE_KEY=your_service_role_key\n```\n\n### 4. Enable Extensions\nThe schema automatically enables required extensions:\n- `uuid-ossp` for UUID generation\n- `postgis` for geographic/location features\n\n### 5. Row Level Security (RLS)\nThe schema includes comprehensive RLS policies:\n- Users can only access their own data\n- Salon owners can manage their own salons\n- Public read access for salon discovery\n- Proper isolation between different user roles\n\n## Key Features\n\n### Geographic Features\n- PostGIS integration for location-based queries\n- Distance calculations for salon discovery\n- Radius-based salon filtering\n\n### Queue Management\n- Automatic position calculation\n- Real-time status updates\n- Estimated wait time calculations\n\n### Security\n- Row Level Security (RLS) on all tables\n- User role-based access control\n- Secure authentication integration\n\n### Performance\n- Optimized indexes for common queries\n- Efficient geographic queries\n- Automatic triggers for data consistency\n\n## Development Notes\n\n- The schema supports both development and production environments\n- Sample data is provided for easier development\n- All triggers and functions are production-ready\n- Geographic queries use proper spatial indexes for performance","size_bytes":2470},"smartq/src/app/globals.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  html {\n    font-family: 'Inter', ui-sans-serif, system-ui, sans-serif;\n  }\n  \n  body {\n    @apply bg-gray-50 text-gray-900;\n  }\n}\n\n@layer components {\n  .btn-primary {\n    @apply bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg font-medium transition-colors;\n  }\n  \n  .btn-secondary {\n    @apply bg-gray-100 hover:bg-gray-200 text-gray-900 px-4 py-2 rounded-lg font-medium transition-colors;\n  }\n  \n  .card {\n    @apply bg-white rounded-lg shadow-sm border border-gray-200 p-6;\n  }\n  \n  .input {\n    @apply w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none transition-colors;\n  }\n}\n\n/* Mobile-first responsive utilities */\n@media (max-width: 640px) {\n  .mobile-padding {\n    @apply px-4 py-2;\n  }\n  \n  .mobile-text {\n    @apply text-sm;\n  }\n}","size_bytes":900},"smartq/src/app/layout.tsx":{"content":"import type { Metadata, Viewport } from 'next'\nimport { Inter } from 'next/font/google'\nimport './globals.css'\n\nconst inter = Inter({ subsets: ['latin'] })\n\nexport const metadata: Metadata = {\n  title: 'SmartQ - Salon Queue Management',\n  description: 'Modern salon queue management system with real-time updates',\n}\n\nexport const viewport: Viewport = {\n  width: 'device-width',\n  initialScale: 1,\n  maximumScale: 1,\n}\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body className={inter.className}>\n        <main className=\"min-h-screen bg-gray-50\">\n          {children}\n        </main>\n      </body>\n    </html>\n  )\n}","size_bytes":699},"smartq/src/app/page.tsx":{"content":"export default function Home() {\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <div className=\"text-center\">\n        <h1 className=\"text-4xl font-bold text-gray-900 mb-4\">\n          Welcome to SmartQ\n        </h1>\n        <p className=\"text-lg text-gray-600 mb-8\">\n          Your modern salon queue management system\n        </p>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 max-w-4xl mx-auto\">\n          <div className=\"card text-center\">\n            <div className=\"w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <span className=\"text-2xl\">üë•</span>\n            </div>\n            <h3 className=\"text-xl font-semibold mb-2\">For Customers</h3>\n            <p className=\"text-gray-600\">\n              Join queues, track your position, and get real-time updates\n            </p>\n          </div>\n          <div className=\"card text-center\">\n            <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <span className=\"text-2xl\">‚úÇÔ∏è</span>\n            </div>\n            <h3 className=\"text-xl font-semibold mb-2\">For Salon Owners</h3>\n            <p className=\"text-gray-600\">\n              Manage your salon, services, and customer queues efficiently\n            </p>\n          </div>\n          <div className=\"card text-center\">\n            <div className=\"w-16 h-16 bg-purple-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <span className=\"text-2xl\">üì±</span>\n            </div>\n            <h3 className=\"text-xl font-semibold mb-2\">Mobile-First</h3>\n            <p className=\"text-gray-600\">\n              Optimized for mobile devices with a responsive design\n            </p>\n          </div>\n        </div>\n        <div className=\"mt-8 space-x-4\">\n          <button className=\"btn-primary\">Get Started</button>\n          <button className=\"btn-secondary\">Learn More</button>\n        </div>\n      </div>\n    </div>\n  )\n}","size_bytes":2018},"smartq/src/lib/env.ts":{"content":"// Environment variable validation and configuration\nexport const env = {\n  // Supabase configuration\n  NEXT_PUBLIC_SUPABASE_URL: process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  NEXT_PUBLIC_SUPABASE_ANON_KEY: process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n  SUPABASE_SERVICE_ROLE_KEY: process.env.SUPABASE_SERVICE_ROLE_KEY,\n  \n  // Google Maps API\n  NEXT_PUBLIC_GOOGLE_MAPS_API_KEY: process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY,\n  \n  // Twilio configuration\n  TWILIO_ACCOUNT_SID: process.env.TWILIO_ACCOUNT_SID,\n  TWILIO_AUTH_TOKEN: process.env.TWILIO_AUTH_TOKEN,\n  TWILIO_PHONE_NUMBER: process.env.TWILIO_PHONE_NUMBER,\n  \n  // Auth configuration\n  NEXTAUTH_SECRET: process.env.NEXTAUTH_SECRET || process.env.SESSION_SECRET,\n  NEXTAUTH_URL: process.env.NEXTAUTH_URL || process.env.NEXT_PUBLIC_SITE_URL || 'http://localhost:3000',\n  \n  // Environment\n  NODE_ENV: process.env.NODE_ENV || 'development',\n  IS_DEVELOPMENT: process.env.NODE_ENV === 'development',\n}\n\n// Validation function to ensure required environment variables are present\nexport function validateEnvironment() {\n  const required = [\n    'NEXT_PUBLIC_SUPABASE_URL',\n    'NEXT_PUBLIC_SUPABASE_ANON_KEY',\n  ]\n  \n  const missing = required.filter(key => !env[key as keyof typeof env])\n  \n  if (missing.length > 0) {\n    console.error('Missing required environment variables:', missing)\n    throw new Error(`Missing required environment variables: ${missing.join(', ')}`)\n  }\n  \n  // Validate URL format for Supabase\n  try {\n    new URL(env.NEXT_PUBLIC_SUPABASE_URL)\n  } catch (error) {\n    throw new Error('NEXT_PUBLIC_SUPABASE_URL must be a valid URL')\n  }\n  \n  console.log('‚úÖ Environment validation passed')\n}","size_bytes":1664},"smartq/src/lib/otp.ts":{"content":"// Secure OTP utilities for SmartQ\n// Server-side only functions for OTP generation and verification\n\nimport crypto from 'crypto'\nimport { createServiceRoleClient } from '@/lib/supabase/server'\n\n// Generate a secure 6-digit OTP\nexport function generateOTP(): string {\n  // Generate cryptographically secure random 6-digit number\n  const buffer = crypto.randomBytes(4)\n  const randomNumber = buffer.readUInt32BE(0)\n  const otp = (randomNumber % 900000 + 100000).toString() // Ensures 6 digits\n  return otp\n}\n\n// Hash OTP with SHA-256 for secure storage\nexport function hashOTP(otp: string, context: string): string {\n  const data = `${otp}:${context}:${process.env.SESSION_SECRET || 'fallback'}`\n  return crypto.createHash('sha256').update(data).digest('hex')\n}\n\n// Verify OTP hash\nexport function verifyOTPHash(otp: string, hash: string, context: string): boolean {\n  const computedHash = hashOTP(otp, context)\n  return crypto.timingSafeEqual(Buffer.from(hash), Buffer.from(computedHash))\n}\n\n// Store OTP securely (server-side only)\nexport async function storeOTP(\n  userId: string,\n  email: string | null,\n  phone: string | null,\n  verificationType: 'email' | 'phone'\n): Promise<{ otp: string; success: boolean; error?: string }> {\n  if (typeof window !== 'undefined') {\n    throw new Error('storeOTP can only be called on the server side')\n  }\n\n  const supabase = createServiceRoleClient()\n  const otp = generateOTP()\n  const context = `${userId}:${verificationType}`\n  const otpHash = hashOTP(otp, context)\n\n  try {\n    // First, invalidate any existing active OTPs for this user/type\n    await supabase\n      .from('otp_verifications')\n      .update({ verified: true }) // Mark as verified to break uniqueness constraint\n      .eq('user_id', userId)\n      .eq('verification_type', verificationType)\n      .eq('verified', false)\n\n    // Create new OTP entry\n    const { error } = await supabase\n      .from('otp_verifications')\n      .insert({\n        user_id: userId,\n        email,\n        phone,\n        otp_hash: otpHash,\n        verification_type: verificationType,\n        expires_at: new Date(Date.now() + 5 * 60 * 1000).toISOString(), // 5 minutes\n      })\n\n    if (error) {\n      console.error('Error storing OTP:', error)\n      return { otp: '', success: false, error: error.message }\n    }\n\n    return { otp, success: true }\n  } catch (error) {\n    console.error('Error storing OTP:', error)\n    return { \n      otp: '', \n      success: false, \n      error: error instanceof Error ? error.message : 'Unknown error' \n    }\n  }\n}\n\n// Verify OTP (server-side only)\nexport async function verifyOTP(\n  userId: string,\n  otp: string,\n  verificationType: 'email' | 'phone'\n): Promise<{ success: boolean; error?: string }> {\n  if (typeof window !== 'undefined') {\n    throw new Error('verifyOTP can only be called on the server side')\n  }\n\n  const supabase = createServiceRoleClient()\n  const context = `${userId}:${verificationType}`\n\n  try {\n    // Get the latest unverified OTP for this user/type\n    const { data: otpRecord, error: fetchError } = await supabase\n      .from('otp_verifications')\n      .select('*')\n      .eq('user_id', userId)\n      .eq('verification_type', verificationType)\n      .eq('verified', false)\n      .gte('expires_at', new Date().toISOString())\n      .order('created_at', { ascending: false })\n      .limit(1)\n      .single()\n\n    if (fetchError || !otpRecord) {\n      return { success: false, error: 'No valid OTP found or OTP has expired' }\n    }\n\n    // Verify the OTP hash\n    if (!verifyOTPHash(otp, otpRecord.otp_hash, context)) {\n      return { success: false, error: 'Invalid OTP' }\n    }\n\n    // Mark OTP as verified\n    const { error: updateError } = await supabase\n      .from('otp_verifications')\n      .update({ verified: true })\n      .eq('id', otpRecord.id)\n\n    if (updateError) {\n      console.error('Error updating OTP verification:', updateError)\n      return { success: false, error: 'Verification failed' }\n    }\n\n    // Update user verification status\n    const updateField = verificationType === 'email' ? 'email_verified' : 'phone_verified'\n    await supabase\n      .from('users')\n      .update({ [updateField]: true })\n      .eq('id', userId)\n\n    return { success: true }\n  } catch (error) {\n    console.error('Error verifying OTP:', error)\n    return { \n      success: false, \n      error: error instanceof Error ? error.message : 'Verification failed' \n    }\n  }\n}\n\n// Clean up expired OTPs (can be run periodically)\nexport async function cleanupExpiredOTPs(): Promise<void> {\n  if (typeof window !== 'undefined') {\n    throw new Error('cleanupExpiredOTPs can only be called on the server side')\n  }\n\n  const supabase = createServiceRoleClient()\n  \n  await supabase\n    .from('otp_verifications')\n    .delete()\n    .lt('expires_at', new Date().toISOString())\n}","size_bytes":4825},"smartq/src/lib/twilio.ts":{"content":"// Twilio SMS and messaging utilities\n// Based on the twilio_send_message integration\n\nimport { env } from '@/lib/env'\n\n// Types for Twilio messaging\nexport interface TwilioMessage {\n  to: string\n  body: string\n  from?: string\n}\n\nexport interface TwilioMessageResponse {\n  sid: string\n  status: string\n  error?: string\n}\n\n// Send SMS message using Twilio (server-side only)\nexport async function sendSMSMessage({ to, body, from }: TwilioMessage): Promise<TwilioMessageResponse> {\n  // This function should only be called on the server side\n  if (typeof window !== 'undefined') {\n    throw new Error('sendSMSMessage can only be called on the server side')\n  }\n  \n  // Validate required environment variables\n  if (!env.TWILIO_ACCOUNT_SID || !env.TWILIO_AUTH_TOKEN || !env.TWILIO_PHONE_NUMBER) {\n    throw new Error('Twilio credentials are not configured. Please set TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN, and TWILIO_PHONE_NUMBER environment variables.')\n  }\n  \n  try {\n    const twilio = require('twilio')\n    const client = twilio(env.TWILIO_ACCOUNT_SID, env.TWILIO_AUTH_TOKEN)\n    \n    const message = await client.messages.create({\n      body,\n      from: from || env.TWILIO_PHONE_NUMBER,\n      to,\n    })\n    \n    console.log(`SMS sent with SID: ${message.sid}`)\n    \n    return {\n      sid: message.sid,\n      status: message.status,\n    }\n  } catch (error) {\n    console.error('Error sending SMS:', error)\n    \n    return {\n      sid: '',\n      status: 'failed',\n      error: error instanceof Error ? error.message : 'Unknown error',\n    }\n  }\n}\n\n// Send OTP via SMS\nexport async function sendOTPMessage(phoneNumber: string, otp: string): Promise<TwilioMessageResponse> {\n  const message = `Your SmartQ verification code is: ${otp}. This code will expire in 5 minutes.`\n  \n  return sendSMSMessage({\n    to: phoneNumber,\n    body: message,\n  })\n}\n\n// Send queue status update via SMS\nexport async function sendQueueUpdateMessage(\n  phoneNumber: string,\n  salonName: string,\n  status: string,\n  estimatedWaitTime?: number\n): Promise<TwilioMessageResponse> {\n  let message = `SmartQ Update: Your status at ${salonName} is now \"${status}\".`\n  \n  if (estimatedWaitTime && status === 'waiting') {\n    message += ` Estimated wait time: ${estimatedWaitTime} minutes.`\n  }\n  \n  return sendSMSMessage({\n    to: phoneNumber,\n    body: message,\n  })\n}\n\n// Format phone number for Twilio (E.164 format)\nexport function formatPhoneNumber(phoneNumber: string): string {\n  // Remove all non-digit characters\n  const digitsOnly = phoneNumber.replace(/\\D/g, '')\n  \n  // Add +1 for US numbers if not present\n  if (digitsOnly.length === 10 && !phoneNumber.startsWith('+')) {\n    return `+1${digitsOnly}`\n  }\n  \n  // Add + if not present\n  if (!phoneNumber.startsWith('+')) {\n    return `+${digitsOnly}`\n  }\n  \n  return phoneNumber\n}\n\n// Validate phone number format\nexport function isValidPhoneNumber(phoneNumber: string): boolean {\n  const formatted = formatPhoneNumber(phoneNumber)\n  // Basic E.164 validation: starts with +, followed by 7-15 digits\n  return /^\\+[1-9]\\d{6,14}$/.test(formatted)\n}","size_bytes":3083},"smartq/src/types/database.ts":{"content":"export type Json =\n  | string\n  | number\n  | boolean\n  | null\n  | { [key: string]: Json | undefined }\n  | Json[]\n\n// Database schema types\nexport interface Database {\n  public: {\n    Tables: {\n      users: {\n        Row: {\n          id: string\n          name: string\n          email: string\n          phone: string | null\n          role: 'customer' | 'salon_owner' | 'admin'\n          loyalty_points: number\n          profile_picture_url: string | null\n          email_verified: boolean\n          phone_verified: boolean\n          created_at: string\n          updated_at: string\n        }\n        Insert: {\n          id?: string\n          name: string\n          email: string\n          phone?: string | null\n          role?: 'customer' | 'salon_owner' | 'admin'\n          loyalty_points?: number\n          profile_picture_url?: string | null\n          email_verified?: boolean\n          phone_verified?: boolean\n          created_at?: string\n          updated_at?: string\n        }\n        Update: {\n          id?: string\n          name?: string\n          email?: string\n          phone?: string | null\n          role?: 'customer' | 'salon_owner' | 'admin'\n          loyalty_points?: number\n          profile_picture_url?: string | null\n          email_verified?: boolean\n          phone_verified?: boolean\n          updated_at?: string\n        }\n      }\n      salons: {\n        Row: {\n          id: string\n          owner_id: string\n          name: string\n          description: string | null\n          address: string\n          latitude: number\n          longitude: number\n          operating_hours: Json\n          salon_type: 'men' | 'women' | 'unisex'\n          rating_avg: number | null\n          created_at: string\n          updated_at: string\n        }\n        Insert: {\n          id?: string\n          owner_id: string\n          name: string\n          description?: string | null\n          address: string\n          latitude: number\n          longitude: number\n          operating_hours: Json\n          salon_type: 'men' | 'women' | 'unisex'\n          rating_avg?: number | null\n          created_at?: string\n          updated_at?: string\n        }\n        Update: {\n          id?: string\n          owner_id?: string\n          name?: string\n          description?: string | null\n          address?: string\n          latitude?: number\n          longitude?: number\n          operating_hours?: Json\n          salon_type?: 'men' | 'women' | 'unisex'\n          rating_avg?: number | null\n          updated_at?: string\n        }\n      }\n      services: {\n        Row: {\n          id: string\n          salon_id: string\n          name: string\n          description: string | null\n          price: number\n          duration: number\n          category: string\n          created_at: string\n          updated_at: string\n        }\n        Insert: {\n          id?: string\n          salon_id: string\n          name: string\n          description?: string | null\n          price: number\n          duration: number\n          category: string\n          created_at?: string\n          updated_at?: string\n        }\n        Update: {\n          id?: string\n          salon_id?: string\n          name?: string\n          description?: string | null\n          price?: number\n          duration?: number\n          category?: string\n          updated_at?: string\n        }\n      }\n      queues: {\n        Row: {\n          id: string\n          customer_id: string\n          salon_id: string\n          service_ids: string[]\n          status: 'waiting' | 'in-progress' | 'completed' | 'no-show'\n          position: number | null\n          estimated_wait_time: number | null\n          joined_at: string\n          started_at: string | null\n          completed_at: string | null\n          no_show_at: string | null\n        }\n        Insert: {\n          id?: string\n          customer_id: string\n          salon_id: string\n          service_ids: string[]\n          status?: 'waiting' | 'in-progress' | 'completed' | 'no-show'\n          position?: number | null\n          estimated_wait_time?: number | null\n          joined_at?: string\n          started_at?: string | null\n          completed_at?: string | null\n          no_show_at?: string | null\n        }\n        Update: {\n          id?: string\n          customer_id?: string\n          salon_id?: string\n          service_ids?: string[]\n          status?: 'waiting' | 'in-progress' | 'completed' | 'no-show'\n          position?: number | null\n          estimated_wait_time?: number | null\n          started_at?: string | null\n          completed_at?: string | null\n          no_show_at?: string | null\n        }\n      }\n      reviews: {\n        Row: {\n          id: string\n          salon_id: string\n          customer_id: string\n          rating: number\n          comment: string | null\n          created_at: string\n          updated_at: string\n        }\n        Insert: {\n          id?: string\n          salon_id: string\n          customer_id: string\n          rating: number\n          comment?: string | null\n          created_at?: string\n          updated_at?: string\n        }\n        Update: {\n          id?: string\n          salon_id?: string\n          customer_id?: string\n          rating?: number\n          comment?: string | null\n          updated_at?: string\n        }\n      }\n      salon_photos: {\n        Row: {\n          id: string\n          salon_id: string\n          url: string\n          metadata: Json | null\n          created_at: string\n        }\n        Insert: {\n          id?: string\n          salon_id: string\n          url: string\n          metadata?: Json | null\n          created_at?: string\n        }\n        Update: {\n          id?: string\n          salon_id?: string\n          url?: string\n          metadata?: Json | null\n        }\n      }\n      offers: {\n        Row: {\n          id: string\n          salon_id: string | null\n          title: string\n          description: string | null\n          discount_type: 'percentage' | 'flat'\n          discount_amount: number\n          valid_from: string\n          valid_to: string\n          terms: string | null\n          active: boolean\n          created_at: string\n          updated_at: string\n        }\n        Insert: {\n          id?: string\n          salon_id?: string | null\n          title: string\n          description?: string | null\n          discount_type: 'percentage' | 'flat'\n          discount_amount: number\n          valid_from: string\n          valid_to: string\n          terms?: string | null\n          active?: boolean\n          created_at?: string\n          updated_at?: string\n        }\n        Update: {\n          id?: string\n          salon_id?: string | null\n          title?: string\n          description?: string | null\n          discount_type?: 'percentage' | 'flat'\n          discount_amount?: number\n          valid_from?: string\n          valid_to?: string\n          terms?: string | null\n          active?: boolean\n          updated_at?: string\n        }\n      }\n      favorites: {\n        Row: {\n          user_id: string\n          salon_id: string\n          created_at: string\n        }\n        Insert: {\n          user_id: string\n          salon_id: string\n          created_at?: string\n        }\n        Update: {\n          user_id?: string\n          salon_id?: string\n        }\n      }\n    }\n    Views: {\n      [_ in never]: never\n    }\n    Functions: {\n      [_ in never]: never\n    }\n    Enums: {\n      [_ in never]: never\n    }\n  }\n}\n\n// Helper types\nexport type User = Database['public']['Tables']['users']['Row']\nexport type Salon = Database['public']['Tables']['salons']['Row']\nexport type Service = Database['public']['Tables']['services']['Row']\nexport type Queue = Database['public']['Tables']['queues']['Row']\nexport type Review = Database['public']['Tables']['reviews']['Row']\nexport type SalonPhoto = Database['public']['Tables']['salon_photos']['Row']\nexport type Offer = Database['public']['Tables']['offers']['Row']\nexport type Favorite = Database['public']['Tables']['favorites']['Row']","size_bytes":8040},"smartq/src/lib/supabase/client.ts":{"content":"import { createClient } from '@supabase/supabase-js'\nimport { Database } from '@/types/database'\nimport { env, validateEnvironment } from '@/lib/env'\n\n// Validate environment variables on client creation\nif (typeof window !== 'undefined') {\n  validateEnvironment()\n}\n\nexport const supabase = createClient<Database>(env.NEXT_PUBLIC_SUPABASE_URL, env.NEXT_PUBLIC_SUPABASE_ANON_KEY, {\n  auth: {\n    autoRefreshToken: true,\n    persistSession: true,\n    detectSessionInUrl: true\n  },\n  realtime: {\n    params: {\n      eventsPerSecond: 10,\n    },\n  },\n})\n\n// Client-side auth helpers\nexport const auth = supabase.auth\nexport const db = supabase\nexport const storage = supabase.storage\nexport const realtime = supabase.realtime","size_bytes":721},"smartq/src/lib/supabase/server.ts":{"content":"import 'server-only'\nimport { createClient } from '@supabase/supabase-js'\nimport { Database } from '@/types/database'\nimport { env } from '@/lib/env'\n\n// Server-side Supabase client with user auth context for regular server operations\n// Uses anon key with user session - respects RLS policies\nexport function createServerClient() {\n  return createClient<Database>(\n    env.NEXT_PUBLIC_SUPABASE_URL,\n    env.NEXT_PUBLIC_SUPABASE_ANON_KEY,\n    {\n      auth: {\n        autoRefreshToken: false,\n        persistSession: false\n      }\n    }\n  )\n}\n\n// Helper to get a client with user context from cookies (for SSR/API routes)\nexport function createServerClientWithAuth(supabaseAccessToken?: string) {\n  const client = createClient<Database>(\n    env.NEXT_PUBLIC_SUPABASE_URL,\n    env.NEXT_PUBLIC_SUPABASE_ANON_KEY,\n    {\n      auth: {\n        autoRefreshToken: false,\n        persistSession: false\n      },\n      global: {\n        headers: supabaseAccessToken ? {\n          Authorization: `Bearer ${supabaseAccessToken}`\n        } : {}\n      }\n    }\n  )\n  \n  return client\n}\n\n// INTERNAL USE ONLY: Service role client for OTP, notifications, and system operations\n// This bypasses RLS - use ONLY for trusted internal operations\nexport function createServiceRoleClient() {\n  if (!env.SUPABASE_SERVICE_ROLE_KEY) {\n    throw new Error('SUPABASE_SERVICE_ROLE_KEY is required for service role operations')\n  }\n  \n  return createClient<Database>(\n    env.NEXT_PUBLIC_SUPABASE_URL,\n    env.SUPABASE_SERVICE_ROLE_KEY,\n    {\n      auth: {\n        autoRefreshToken: false,\n        persistSession: false\n      }\n    }\n  )\n}","size_bytes":1607}},"version":1}